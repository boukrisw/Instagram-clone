{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comment","setComment","comments","setComments","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","i","key","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","openSignIn","setOpenSignIn","open","setOpen","email","setEmail","password","setPassword","setUsername","setUser","onAuthStateChanged","authUser","id","post","Modal","onClose","style","Input","signInWithEmailAndPassword","catch","createUserWithEmailAndPassword","updateProfile","signOut","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.733a074d.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyCaGxtP92osBZZkk8DlqVb8Nghc_eTuhes\",\n  authDomain: \"instagram-clone20.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone20.firebaseio.com\",\n  projectId: \"instagram-clone20\",\n  storageBucket: \"instagram-clone20.appspot.com\",\n  messagingSenderId: \"710075844590\",\n  appId: \"1:710075844590:web:ab52e3f1f9196e7570f0ff\",\n  measurementId: \"G-PVLDFEW1SP\",\n});\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n\nexport { db, auth, storage };\n","import React, { useState, useEffect } from \"react\";\nimport \"./Post.css\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { db } from \"./firebase\";\nimport firebase from \"firebase\";\nfunction Post({ postId, user, username, caption, imageUrl }) {\n  const [comment, setComment] = useState(\"\");\n\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    let unsubscribe;\n    if (postId) {\n      unsubscribe = db\n        .collection(\"posts\")\n        .doc(postId)\n        .collection(\"comments\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) => {\n          setComments(snapshot.docs.map((doc) => doc.data()));\n        });\n    }\n    return () => {\n      unsubscribe();\n    };\n  }, [postId]);\n\n  const postComment = (event) => {\n    event.preventDefault();\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: user.displayName,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setComment(\"\");\n  };\n\n  return (\n    <div className=\"post\">\n      {/* HEADER -> avatar + userName*/}\n      <div className=\"post__header\">\n        <Avatar className=\"post__avatar\" alt={username} src={username} />\n        <h3>{username}</h3>\n      </div>\n\n      {/* Image */}\n      <img className=\"post__image\" src={imageUrl} alt=\"\" />\n\n      {/* userName + caption */}\n      {caption && (\n        <h4 className=\"post__text\">\n          <strong>{username}</strong> {caption}\n        </h4>\n      )}\n\n      <div className=\"post__comments\">\n        {comments.map((comment, i) => {\n          return (\n            <p key={i}>\n              <b>{comment.username}</b> {comment.text}\n            </p>\n          );\n        })}\n      </div>\n      {user && (\n        <form className=\"post__commentBox\">\n          <input\n            className=\"post__input\"\n            type=\"text\"\n            placeholder=\"Add a comment...\"\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n          />\n          <button\n            className=\"post__button\"\n            disabled={!comment}\n            type=\"submit\"\n            onClick={postComment}\n          >\n            Post\n          </button>\n        </form>\n      )}\n    </div>\n  );\n}\n\nexport default Post;\n","import React, { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { storage, db } from \"./firebase\";\nimport firebase from \"firebase\";\nimport \"./ImageUpload.css\";\n\nfunction ImageUpload({ user }) {\n  const [image, setImage] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [caption, setCaption] = useState(\"\");\n\n  const handleChange = (e) => {\n    if (e.target.files[0]) {\n      setImage(e.target.files[0]);\n    }\n  };\n\n  const handleUpload = () => {\n    if (image) {\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          //progress function ...\n          const progress = Math.round(\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n          );\n          setProgress(progress);\n        },\n        (error) => {\n          //Error function\n          console.log(error);\n          alert(error.message);\n        },\n        () => {\n          //Complete function ...\n          storage\n            .ref(\"images\")\n            .child(image.name)\n            .getDownloadURL()\n            .then((url) => {\n              db.collection(\"posts\").add({\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                caption: caption,\n                imageUrl: url,\n                username: user?.displayName,\n              });\n              setProgress(0);\n              setCaption(\"\");\n              setImage(null);\n            });\n        }\n      );\n    }\n  };\n\n  return (\n    <div className=\"imageupload\">\n      {/*Caption Input */}\n      {/*File Picker */}\n      {/*Post button */}\n      <progress className=\"imageupload__progress\" value={progress} max=\"100\" />\n      <input\n        type=\"text\"\n        placeholder=\"Enter a caption ...\"\n        onChange={(event) => setCaption(event.target.value)}\n        value={caption}\n      />\n      <input type=\"file\" onChange={handleChange} />\n      <Button onClick={handleUpload}>Upload</Button>\n    </div>\n  );\n}\n\nexport default ImageUpload;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./Post\";\nimport { db, auth } from \"./firebase\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Input } from \"@material-ui/core\";\nimport ImageUpload from \"./ImageUpload\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: \"50%\",\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        setUser(authUser);\n      } else {\n        setUser(null);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [user]);\n\n  useEffect(() => {\n    db.collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setPosts(\n          snapshot.docs.map((doc) => ({ id: doc.id, post: doc.data() }))\n        );\n      });\n  }, []);\n\n  const signUp = (event) => {\n    event.preventDefault();\n    if (username) {\n      auth\n        .createUserWithEmailAndPassword(email, password)\n        .then((authUser) => {\n          return authUser.user\n            .updateProfile({\n              displayName: username,\n            })\n            .then(() => {\n              setOpen(false);\n              setEmail(\"\");\n              setPassword(\"\");\n              setUsername(\"\");\n            });\n        })\n        .catch((error) => alert(error.message));\n    }\n  };\n\n  const signIn = (event) => {\n    event.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        setEmail(\"\");\n        setPassword(\"\");\n        setUsername(\"\");\n        setOpenSignIn(false);\n      })\n      .catch((error) => alert(error.message));\n  };\n  return (\n    <div className=\"App\">\n      <Modal open={openSignIn} onClose={() => setOpenSignIn(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                alt=\"\"\n              />\n            </center>\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button type=\"submit\" onClick={signIn}>\n              Sign In\n            </Button>\n          </form>\n        </div>\n      </Modal>\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                alt=\"\"\n              />\n            </center>\n            <Input\n              placeholder=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button type=\"submit\" onClick={signUp}>\n              Sign Up\n            </Button>\n          </form>\n        </div>\n      </Modal>\n      {/* HEADER */}\n      <div className=\"app__header\">\n        <img\n          className=\"app__headerimage\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"\"\n        />\n        {user ? (\n          <Button onClick={() => auth.signOut()}>Logout</Button>\n        ) : (\n          <div className=\"app__loginContainer\">\n            <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\n            <Button onClick={() => setOpen(true)}>Sign Up</Button>\n          </div>\n        )}\n      </div>\n\n      {/* POSTS */}\n      <div className=\"app__posts\">\n        {posts.map(({ id, post }) => {\n          return (\n            <Post\n              key={id}\n              postId={id}\n              user={user}\n              username={post.username}\n              caption={post.caption}\n              imageUrl={post.imageUrl}\n            />\n          );\n        })}\n      </div>\n      {user ? (\n        <ImageUpload user={user} />\n      ) : (\n        <h3 className=\"bottomConnet\">Sorry you need to login to upload</h3>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}